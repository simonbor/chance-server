drop function if exists main."sp_GetDriver";
drop function if exists main."sp_InsertDriver";
drop function if exists main."sp_UpdateReports";
drop function if exists main."sp_GetAllStreets";
drop function if exists main."sp_GetAddress";
drop function if exists main."sp_InsertAddress";
drop function if exists main."sp_GetLocationByAddress";
drop function if exists main."sp_InsertLocation";
drop function if exists main."sp_InsertChance";
drop function if exists main."sp_GetChanceByCity";
drop function if exists main."sp_GetCity";

-- =================================
-- Driver
-- =================================

create or replace function main."sp_GetDriver" (
	p_MobileNum varchar(20)
) returns setof main."Driver" as $$
begin
    return query select * from main."Driver" where main."Driver"."MobileNum" = p_MobileNum;
end;
$$ language plpgsql;

create or replace function main."sp_InsertDriver" (
	p_MobileNum varchar(20),
    p_Name varchar(100) = null,
	p_CarName varchar(50) = null,
	p_CarColor varchar(50) = null
) returns table("DriverId" int, "Name" varchar(100)) as $$
	insert into main."Driver" ("Name", "MobileNum", "CarName", "CarColor")
	values (p_Name, p_MobileNum, p_CarName, p_CarColor);

	select "DriverId", "Name" from main."Driver" d where d."MobileNum" = p_MobileNum;
$$ language sql;

create or replace function main."sp_UpdateReports" (
	p_DriverId int
) returns setof main."Driver" as $$
begin
	update main."Driver" set "Reports" = "Reports" + 1, "Updated" = timezone('utc', now()) where"DriverId" = p_DriverId;
	return query select * from main."Driver" d where d."DriverId" = p_DriverId;
end;
$$ language plpgsql;

-- =================================
-- City
-- =================================

create or replace function main."sp_GetCity" (
	p_CityId int
) returns setof main."City" as $$
begin
    return query select * from main."City" c where c."CityId" = p_CityId;
end;
$$ language plpgsql;

-- =================================
-- Streets
-- =================================

create or replace function main."sp_GetAllStreets" (
	p_CityId int
) returns setof main."Street" as $$
begin
    return query select * from main."Street" where main."Street"."CityId" = p_CityId;
end;
$$ language plpgsql;

-- =================================
-- Address
-- =================================

create or replace function main."sp_GetAddress" (
	p_StreetId int,
	p_CityId int,
	p_CountryId int,
	p_Building int = null
) returns setof main."Address" as $$
begin
	return query select * from main."Address" a
		where a."CountryId" = p_CountryId and
			a."CityId" = p_CityId and
			a."StreetId" = p_StreetId and
			a."Building" = p_Building;
end;
$$ language plpgsql;

create or replace function main."sp_InsertAddress" (
    p_StreetId int,
	p_CityId int,
	p_CountryId int = 376,
	p_Building int = null,
	p_CreatedBy int = null
) returns table("AddressId" int, "CreatedBy" int)
language plpgsql AS $$
	declare v_AddressId integer = null;
begin
		insert into main."Address" ("CountryId", "CityId", "StreetId", "Building", "CreatedBy")
		values (p_CountryId, p_CityId, p_StreetId, p_Building, p_CreatedBy)
		returning main."Address"."AddressId" into v_AddressId;

		return query select a."AddressId", a."CreatedBy" from main."Address" a where a."AddressId" = v_AddressId;
end;$$;

-- =================================
-- Location
-- =================================

create or replace function main."sp_GetLocationByAddress" (
	p_AddressId int
) RETURNS SETOF main."Location" AS $$
	select * from main."Location" l where l."AddressId" = p_AddressId limit 1;
$$ LANGUAGE SQL;

create or replace function main."sp_InsertLocation" (
	p_Latitude double precision,
	p_Longitude double precision,
	p_Altitude double precision = null,
	p_AddressId int = null,
	p_Default boolean = false,
	p_Desc varchar(500) = null,
	p_CreatedBy int = null
) returns table("LocationId" int, "CreatedBy" int)
language plpgsql as $$
	declare v_LocationId integer;
begin
	insert into main."Location"("Latitude", "Longitude", "Altitude", "AddressId", "DefLocation", "Desc", "CreatedBy")
	values (p_Latitude, p_Longitude, p_Altitude, p_AddressId, p_Default, p_Desc, p_CreatedBy)
	returning main."Location"."LocationId" into v_LocationId;
	
	return query select l."LocationId", l."CreatedBy" from main."Location" l where l."LocationId" = v_LocationId;
end;$$;

-- =================================
-- Chance
-- =================================
create or replace function main."sp_InsertChance" (
	p_DriverOut int,
	p_DateStart timestamp(3),
	p_AddressId int = null,
	p_LocationId int = null,
	p_CreatedBy int = null
) returns table (ChanceId int, CreatedBy int) 
language plpgsql as $$
	declare v_ChanceId integer;
begin
	insert into main."Chance" ("LocationId", "AddressId", "DateStart", "DriverOut", "CreatedBy")
	values (p_LocationId, p_AddressId, p_DateStart, p_DriverOut, p_CreatedBy)
	returning main."Chance"."ChanceId" into v_ChanceId;

	return query select c."ChanceId", c."CreatedBy" from main."Chance" c where c."ChanceId" = v_ChanceId;
end;$$;

create or replace function main."sp_GetChanceByCity" (
	p_CityId int,
	p_Gap int = 10 -- 10 minutes gap
) returns setof main."Chance"
language plpgsql AS $$
	declare v_NowMinusGap timestamp(3) = (SELECT -@Gap * INTERVAL '1 mi' + getutcdate());
begin
	select * 
	from main."Chance" c 
	where c."AddressId" 
		in (select "AddressId" from main."Address" a where a."CityId" = p_CityId) and
        c."DateStart" > v_NowMinusGap;
end;$$;




